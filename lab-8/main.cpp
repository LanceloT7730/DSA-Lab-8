#include <iostream>
#include <vector>

using namespace std;

template <typename Type>
unsigned int InsSort(Type arr[], unsigned int size) {
    float temp;
    int counter = 0;
    for (int i = 1; i < size; i++) {
        if (++counter && arr[i] < arr[i - 1]) {
            temp = arr[i];
            arr[i] = arr[i - 1];
            for (int j = i - 2; j > i; j--) {
                if (++counter && temp < arr[j]) {
                    arr[j + 1] = arr[j];
                } else if (++counter && temp == arr[j]) {
                    arr[j + 1] = temp;
                } else if (++counter && temp > arr[j]) {
                    arr[j + 1] = temp;
                    break;
                }
            }
        }
    }
    return counter;
}


float BubbleSort(float arr[], unsigned int size) {
    bool flag = false;
    float counter = 0;
    for (int i = 0; i < size - 1; i++) {
        for (int j = 1; j < size - i; j++) {
            if (++counter && arr[j] < arr[j - 1]) {
                swap(arr[j], arr[j - 1]);
                flag = true;
            }
        }
        if (!flag) break;
    }
    return counter;
}


template<typename Type>
unsigned int selectionSort(Type arr[], unsigned int size) {
    int min;
    unsigned int counter = 0;
    bool isSwapped = false;
    for (int i = 0; i < size; i++) {
        min = i;
        for (int j = i + 1; j < size; j++) {
            if (++counter && arr[j] < arr[min]) min = j;
        }
        
        if (++counter && min != i) {
            swap(arr[min], arr[i]);
            isSwapped = true;
        }
        if (!isSwapped) break;
    }
    return counter;
}

int main() {
    
    float Array_Permutations[120][5] = {
        {5,4,3,2,1},
        {5,4,3,1,2},
        {5,4,2,3,1},
        {5,4,2,1,3},
        {5,4,1,3,2},
        {5,4,1,2,3},
        {5,3,4,2,1},
        {5,3,4,1,2},
        {5,3,2,4,1},
        {5,3,2,1,4},
        {5,3,1,4,2},
        {5,3,1,2,4},
        {5,2,4,3,1},
        {5,2,4,1,3},
        {5,2,3,4,1},
        {5,2,3,1,4},
        {5,2,1,4,3},
        {5,2,1,3,4},
        {5,1,4,3,2},
        {5,1,4,2,3},
        {5,1,3,4,2},
        {5,1,3,2,4},
        {5,1,2,4,3},
        {5,1,2,3,4},
        {4,5,3,2,1},
        {4,5,3,1,2},
        {4,5,2,3,1},
        {4,5,2,1,3},
        {4,5,1,3,2},
        {4,5,1,2,3},
        {4,3,5,2,1},
        {4,3,5,1,2},
        {4,3,2,5,1},
        {4,3,2,1,5},
        {4,3,1,5,2},
        {4,3,1,2,5},
        {4,2,5,3,1},
        {4,2,5,1,3},
        {4,2,3,5,1},
        {4,2,3,1,5},
        {4,2,1,5,3},
        {4,2,1,3,5},
        {4,1,5,3,2},
        {4,1,5,2,3},
        {4,1,3,5,2},
        {4,1,3,2,5},
        {4,1,2,5,3},
        {4,1,2,3,5},
        {3,5,4,2,1},
        {3,5,4,1,2},
        {3,5,2,4,1},
        {3,5,2,1,4},
        {3,5,1,4,2},
        {3,5,1,2,4},
        {3,4,5,2,1},
        {3,4,5,1,2},
        {3,4,2,5,1},
        {3,4,2,1,5},
        {3,4,1,5,2},
        {3,4,1,2,5},
        {3,2,5,4,1},
        {3,2,5,1,4},
        {3,2,4,5,1},
        {3,2,4,1,5},
        {3,2,1,5,4},
        {3,2,1,4,5},
        {3,1,5,4,2},
        {3,1,5,2,4},
        {3,1,4,5,2},
        {3,1,4,2,5},
        {3,1,2,5,4},
        {3,1,2,4,5},
        {2,5,4,3,1},
        {2,5,4,1,3},
        {2,5,3,4,1},
        {2,5,3,1,4},
        {2,5,1,4,3},
        {2,5,1,3,4},
        {2,4,5,3,1},
        {2,4,5,1,3},
        {2,4,3,5,1},
        {2,4,3,1,5},
        {2,4,1,5,3},
        {2,4,1,3,5},
        {2,3,5,4,1},
        {2,3,5,1,4},
        {2,3,4,5,1},
        {2,3,4,1,5},
        {2,3,1,5,4},
        {2,3,1,4,5},
        {2,1,5,4,3},
        {2,1,5,3,4},
        {2,1,4,5,3},
        {2,1,4,3,5},
        {2,1,3,5,4},
        {2,1,3,4,5},
        {1,5,4,3,2},
        {1,5,4,2,3},
        {1,5,3,4,2},
        {1,5,3,2,4},
        {1,5,2,4,3},
        {1,5,2,3,4},
        {1,4,5,3,2},
        {1,4,5,2,3},
        {1,4,3,5,2},
        {1,4,3,2,5},
        {1,4,2,5,3},
        {1,4,2,3,5},
        {1,3,5,4,2},
        {1,3,5,2,4},
        {1,3,4,5,2},
        {1,3,4,2,5},
        {1,3,2,5,4},
        {1,3,2,4,5},
        {1,2,5,4,3},
        {1,2,5,3,4},
        {1,2,4,5,3},
        {1,2,4,3,5},
        {1,2,3,5,4},
        {1,2,3,4,5}
    };
    float Array_Permutations_2[120][5] = {
        {5,4,3,2,1},
        {5,4,3,1,2},
        {5,4,2,3,1},
        {5,4,2,1,3},
        {5,4,1,3,2},
        {5,4,1,2,3},
        {5,3,4,2,1},
        {5,3,4,1,2},
        {5,3,2,4,1},
        {5,3,2,1,4},
        {5,3,1,4,2},
        {5,3,1,2,4},
        {5,2,4,3,1},
        {5,2,4,1,3},
        {5,2,3,4,1},
        {5,2,3,1,4},
        {5,2,1,4,3},
        {5,2,1,3,4},
        {5,1,4,3,2},
        {5,1,4,2,3},
        {5,1,3,4,2},
        {5,1,3,2,4},
        {5,1,2,4,3},
        {5,1,2,3,4},
        {4,5,3,2,1},
        {4,5,3,1,2},
        {4,5,2,3,1},
        {4,5,2,1,3},
        {4,5,1,3,2},
        {4,5,1,2,3},
        {4,3,5,2,1},
        {4,3,5,1,2},
        {4,3,2,5,1},
        {4,3,2,1,5},
        {4,3,1,5,2},
        {4,3,1,2,5},
        {4,2,5,3,1},
        {4,2,5,1,3},
        {4,2,3,5,1},
        {4,2,3,1,5},
        {4,2,1,5,3},
        {4,2,1,3,5},
        {4,1,5,3,2},
        {4,1,5,2,3},
        {4,1,3,5,2},
        {4,1,3,2,5},
        {4,1,2,5,3},
        {4,1,2,3,5},
        {3,5,4,2,1},
        {3,5,4,1,2},
        {3,5,2,4,1},
        {3,5,2,1,4},
        {3,5,1,4,2},
        {3,5,1,2,4},
        {3,4,5,2,1},
        {3,4,5,1,2},
        {3,4,2,5,1},
        {3,4,2,1,5},
        {3,4,1,5,2},
        {3,4,1,2,5},
        {3,2,5,4,1},
        {3,2,5,1,4},
        {3,2,4,5,1},
        {3,2,4,1,5},
        {3,2,1,5,4},
        {3,2,1,4,5},
        {3,1,5,4,2},
        {3,1,5,2,4},
        {3,1,4,5,2},
        {3,1,4,2,5},
        {3,1,2,5,4},
        {3,1,2,4,5},
        {2,5,4,3,1},
        {2,5,4,1,3},
        {2,5,3,4,1},
        {2,5,3,1,4},
        {2,5,1,4,3},
        {2,5,1,3,4},
        {2,4,5,3,1},
        {2,4,5,1,3},
        {2,4,3,5,1},
        {2,4,3,1,5},
        {2,4,1,5,3},
        {2,4,1,3,5},
        {2,3,5,4,1},
        {2,3,5,1,4},
        {2,3,4,5,1},
        {2,3,4,1,5},
        {2,3,1,5,4},
        {2,3,1,4,5},
        {2,1,5,4,3},
        {2,1,5,3,4},
        {2,1,4,5,3},
        {2,1,4,3,5},
        {2,1,3,5,4},
        {2,1,3,4,5},
        {1,5,4,3,2},
        {1,5,4,2,3},
        {1,5,3,4,2},
        {1,5,3,2,4},
        {1,5,2,4,3},
        {1,5,2,3,4},
        {1,4,5,3,2},
        {1,4,5,2,3},
        {1,4,3,5,2},
        {1,4,3,2,5},
        {1,4,2,5,3},
        {1,4,2,3,5},
        {1,3,5,4,2},
        {1,3,5,2,4},
        {1,3,4,5,2},
        {1,3,4,2,5},
        {1,3,2,5,4},
        {1,3,2,4,5},
        {1,2,5,4,3},
        {1,2,5,3,4},
        {1,2,4,5,3},
        {1,2,4,3,5},
        {1,2,3,5,4},
        {1,2,3,4,5}
    };
    
    float Array_Permutations_3[120][5] = {
        {5,4,3,2,1},
        {5,4,3,1,2},
        {5,4,2,3,1},
        {5,4,2,1,3},
        {5,4,1,3,2},
        {5,4,1,2,3},
        {5,3,4,2,1},
        {5,3,4,1,2},
        {5,3,2,4,1},
        {5,3,2,1,4},
        {5,3,1,4,2},
        {5,3,1,2,4},
        {5,2,4,3,1},
        {5,2,4,1,3},
        {5,2,3,4,1},
        {5,2,3,1,4},
        {5,2,1,4,3},
        {5,2,1,3,4},
        {5,1,4,3,2},
        {5,1,4,2,3},
        {5,1,3,4,2},
        {5,1,3,2,4},
        {5,1,2,4,3},
        {5,1,2,3,4},
        {4,5,3,2,1},
        {4,5,3,1,2},
        {4,5,2,3,1},
        {4,5,2,1,3},
        {4,5,1,3,2},
        {4,5,1,2,3},
        {4,3,5,2,1},
        {4,3,5,1,2},
        {4,3,2,5,1},
        {4,3,2,1,5},
        {4,3,1,5,2},
        {4,3,1,2,5},
        {4,2,5,3,1},
        {4,2,5,1,3},
        {4,2,3,5,1},
        {4,2,3,1,5},
        {4,2,1,5,3},
        {4,2,1,3,5},
        {4,1,5,3,2},
        {4,1,5,2,3},
        {4,1,3,5,2},
        {4,1,3,2,5},
        {4,1,2,5,3},
        {4,1,2,3,5},
        {3,5,4,2,1},
        {3,5,4,1,2},
        {3,5,2,4,1},
        {3,5,2,1,4},
        {3,5,1,4,2},
        {3,5,1,2,4},
        {3,4,5,2,1},
        {3,4,5,1,2},
        {3,4,2,5,1},
        {3,4,2,1,5},
        {3,4,1,5,2},
        {3,4,1,2,5},
        {3,2,5,4,1},
        {3,2,5,1,4},
        {3,2,4,5,1},
        {3,2,4,1,5},
        {3,2,1,5,4},
        {3,2,1,4,5},
        {3,1,5,4,2},
        {3,1,5,2,4},
        {3,1,4,5,2},
        {3,1,4,2,5},
        {3,1,2,5,4},
        {3,1,2,4,5},
        {2,5,4,3,1},
        {2,5,4,1,3},
        {2,5,3,4,1},
        {2,5,3,1,4},
        {2,5,1,4,3},
        {2,5,1,3,4},
        {2,4,5,3,1},
        {2,4,5,1,3},
        {2,4,3,5,1},
        {2,4,3,1,5},
        {2,4,1,5,3},
        {2,4,1,3,5},
        {2,3,5,4,1},
        {2,3,5,1,4},
        {2,3,4,5,1},
        {2,3,4,1,5},
        {2,3,1,5,4},
        {2,3,1,4,5},
        {2,1,5,4,3},
        {2,1,5,3,4},
        {2,1,4,5,3},
        {2,1,4,3,5},
        {2,1,3,5,4},
        {2,1,3,4,5},
        {1,5,4,3,2},
        {1,5,4,2,3},
        {1,5,3,4,2},
        {1,5,3,2,4},
        {1,5,2,4,3},
        {1,5,2,3,4},
        {1,4,5,3,2},
        {1,4,5,2,3},
        {1,4,3,5,2},
        {1,4,3,2,5},
        {1,4,2,5,3},
        {1,4,2,3,5},
        {1,3,5,4,2},
        {1,3,5,2,4},
        {1,3,4,5,2},
        {1,3,4,2,5},
        {1,3,2,5,4},
        {1,3,2,4,5},
        {1,2,5,4,3},
        {1,2,5,3,4},
        {1,2,4,5,3},
        {1,2,4,3,5},
        {1,2,3,5,4},
        {1,2,3,4,5}
    };
    // Bubble Sort
    vector<float> operationsBubbleSort;
    vector<float> operationsSelectionSort;
    vector<float> operationsInsertionSort;
    
    for (int i = 0; i < 120; i++) {
        operationsBubbleSort.push_back(BubbleSort(Array_Permutations[i], 5));
        operationsSelectionSort.push_back(selectionSort(Array_Permutations_2[i], 5));
        operationsInsertionSort.push_back(InsSort(Array_Permutations_3[i],5));
        cout << "Complexity_Bub[" << i << "]->" << operationsBubbleSort[i]
        <<"\t\t"<<"Complexity_Sel[" << i << "]->" << operationsSelectionSort[i]
        <<"\t\t" << "Complexity_Ins[" << i << "]->" << operationsInsertionSort[i];
        cout << endl;
    }
    
    //    sort(operationsBubbleSort.begin(), operationsBubbleSort.end());
    //    float worst_case = operationsBubbleSort[operationsBubbleSort.size() - 1];
    //    float best_case = operationsBubbleSort[0];
    //    float average_case = (operationsBubbleSort[operationsBubbleSort.size() - 1] + operationsBubbleSort[0]) / 2;
    //    cout << "Worst case: " << worst_case  << endl;
    //    cout << "Best case: " << best_case << endl;
    //    cout << "Average case: " << average_case << endl;
    //
    //    //    for(auto &i: operationsBubbleSort) cout << i << " ";
    //    //    cout << endl;
    //
    //    // Selection Sort
    //
    //    cout << "Operations for Selection Sort" << endl;
    
    
    return 0;
}
